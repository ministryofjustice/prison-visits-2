references:
  defaults: &defaults
    working_directory: ~/prison-visits-staff

  github_team_name_slug: &github_team_name_slug
    GITHUB_TEAM_NAME_SLUG: prison-visits-booking

  deploy_container_config: &deploy_container_config
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci

  test_container_config: &test_container_config
    docker:
      - image: circleci/ruby:2.6.7-node-browsers
        environment:
          PGHOST: 127.0.0.1
          PGUSER: ubuntu
          RACK_ENV: test
          PRISON_API_HOST: https://api-dev.prison.service.justice.gov.uk
          NOMIS_OAUTH_HOST: https://sign-in-dev.hmpps.service.justice.gov.uk
      - image: circleci/postgres:9.4.12-alpine
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: ""
          POSTGRES_DB: pvb2_test
      - image: redis

  install_gpg: &install_gpg
    run:
      name: Install GPG
      command: |
        apk add \
          --no-cache \
          --no-progress \
          gnupg

  configure_gpg: &configure_gpg
    run:
      name: Configure GPG
      command: |
        echo "${GPG_PRIVATE_KEY}" | base64 -d | gpg --batch --allow-secret-key-import --import

  decrypt_secrets: &decrypt_secrets
    run:
      name: Decrypt secrets file
      command: |
        gpg --export-ownertrust > /tmp/ownertrust.txt
        echo $GPG_KEY_ID:1 >> /tmp/ownertrust.txt
        gpg --import-ownertrust /tmp/ownertrust.txt
        gpgconf --kill gpg-agent
        gpg-agent --daemon --allow-preset-passphrase
        /usr/libexec/gpg-preset-passphrase --preset --passphrase $GPG_PASSPHRASE $GPG_KEY_KEYGRIP_ID
        git-crypt unlock


  install_aws_cli: &install_aws_cli
    run:
      name: Set up aws
      command: |
        sudo apt-get update
        sudo apt-get --assume-yes install python3-pip
        sudo pip3 install awscli

  build_docker_image: &build_docker_image
    run:
      name: Build docker image
      command: |
        export BUILD_DATE=$(date -Is) >> $BASH_ENV
        source $BASH_ENV
        docker build \
          --build-arg VERSION_NUMBER=${CIRCLE_BUILD_NUM} \
          --build-arg COMMIT_ID=${CIRCLE_SHA1} \
          --build-arg BUILD_DATE=${BUILD_DATE} \
          --build-arg BUILD_TAG=${CIRCLE_BRANCH} \
          -f Dockerfile.kubernetes \
          -t app .

  push_docker_image: &push_docker_image
    run:
      name: Push docker image
      command: |
        login="$(aws ecr get-login --region eu-west-2 --no-include-email)"
        ${login}
        docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:${CIRCLE_SHA1}"
        docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:${CIRCLE_SHA1}"
        if [ "${CIRCLE_BRANCH}" == "main" ]; then
          docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:latest"
          docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:latest"
        fi
      environment:
        <<: *github_team_name_slug
        REPONAME: prison-visits-staff

version: 2
jobs:
  test:
    <<: *defaults
    <<: *test_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/prison-visits-staff
      - run:
          name: Which bundler?
          command: bundle -v
      - restore_cache:
          keys:
            - prison-visits-staff-v3-{{ checksum "Gemfile.lock" }}
            - prison-visits-staff-v3-
      - run: bundle check --path vendor/bundle || bundle install --path vendor/bundle
      - save_cache:
          key: prison-visits-staff-v3-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: install firefox
          command: |
            if [[ $(command -v firefox) ]] && [[ $(firefox --version) == "Mozilla Firefox $FIREFOX_VERSION" ]]; then
              echo "Skiping, Firefox $FIREFOX_VERSION already install."
            else
              wget -L "https://ftp.mozilla.org/pub/firefox/releases/$FIREFOX_VERSION/linux-x86_64/en-US/firefox-$FIREFOX_VERSION.tar.bz2" -O "firefox-$FIREFOX_VERSION.tar.bz2"
              sudo tar xjf "firefox-$FIREFOX_VERSION.tar.bz2" -C /opt
            fi
            [[ -L /usr/local/bin/firefox ]] || sudo ln -sf /opt/firefox/firefox /usr/bin/firefox
      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run: bundle exec rake db:create db:schema:load
      - run:
          name: Rubocop
          command: bundle exec rubocop
      - run:
          name: Security analysis
          command: bundle exec brakeman -o ~/test-results/brakeman/brakeman.json -o ~/test-results/brakeman/brakeman.html
      - run:
          name: Run tests
          command: |
            ./cc-test-reporter before-build
            bundle exec rake
            ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $?
      - run:
          name: Run jasmine tests
          command: |
            bundle exec rake jasmine:ci
      - store_test_results:
          path: coverage
      - store_artifacts:
          path: coverage
      - store_artifacts:
          path: ~/test-results

  build_and_push_docker_image:
    <<: *defaults
    <<: *test_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/prison-visits-staff
      - setup_remote_docker:
          docker_layer_caching: true
      - *install_aws_cli
      - *build_docker_image
      - *push_docker_image

  deploy_development:
    <<:
    steps:
      - checkout
      - attach_workspace:
          at: ~/prison-visits-staff
      - run:
          name: Kubectl deployment development setup
          command: |
            echo -n $KUBE_ENV_DEVELOPMENT_CACERT | base64 -d > ./ca.crt
            kubectl config set-cluster $KUBE_ENV_DEVELOPMENT_NAME --certificate-authority=./ca.crt --server=$KUBE_ENV_DEVELOPMENT_NAME
            kubectl config set-credentials circleci --token=$KUBE_ENV_DEVELOPMENT_TOKEN
            kubectl config set-context $KUBE_ENV_DEVELOPMENT_NAME --cluster=$KUBE_ENV_DEVELOPMENT_NAME --user=circleci --namespace=$KUBE_ENV_DEVELOPMENT_NAMESPACE
            kubectl config use-context $KUBE_ENV_DEVELOPMENT_NAME
      - *install_gpg
      - *configure_gpg
      - *decrypt_secrets
      - deploy:
          name: Deploy to development
          command: |
            kubectl delete job pvb-staff-migration --ignore-not-found
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/development/deployment.yaml
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/development/cronjob.yaml
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/development/migration-job.yaml
            kubectl annotate deployments/prison-visits-booking-staff kubernetes.io/change-cause="$CIRCLE_BUILD_URL"
            kubectl apply --record=false -f ./deploy/development
          environment:
            <<: *github_team_name_slug

  deploy_staging:
    <<: *deploy_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/prison-visits-staff
      - run:
          name: Kubectl deployment staging setup
          command: |
            setup-kube-auth
            kubectl config use-context staging
      - *install_gpg
      - *configure_gpg
      - *decrypt_secrets
      - deploy:
          name: Deploy to staging
          command: |
            kubectl delete job pvb-staff-migration --ignore-not-found
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/staging/deployment.yaml
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/staging/cronjob.yaml
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/staging/migration-job.yaml
            kubectl annotate deployments/prison-visits-booking-staff kubernetes.io/change-cause="$CIRCLE_BUILD_URL"
            kubectl apply --record=false -f ./deploy/staging
          environment:
            <<: *github_team_name_slug

  deploy_production:
    <<: *deploy_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run:
          name: Kubectl deployment production setup
          command: |
            setup-kube-auth
            kubectl config use-context production
      - *install_gpg
      - *configure_gpg
      - *decrypt_secrets
      - deploy:
          name: Deploy to production
          command: |
            kubectl delete job pvb-staff-migration-prod --ignore-not-found
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/production/cronjob.yaml
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/production/deployment.yaml
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/production/migration-job.yaml
            kubectl annotate deployments/prison-visits-booking-staff kubernetes.io/change-cause="$CIRCLE_BUILD_URL"
            kubectl apply --record=false -f ./deploy/production
          environment:
            <<: *github_team_name_slug

workflows:
  version: 2
  build_and_test:
    jobs:
     - test
     - build_and_push_docker_image:
         requires:
           - test
         filters:
           branches:
             only:
              - main
              - k8s-config-user-client-id
     - deploy_development:
         requires:
           - build_and_push_docker_image
         filters:
           branches:
             only:
               - main
               - k8s-config-user-client-id
     - deploy_staging:
         requires:
           - build_and_push_docker_image
           - deploy_development
         filters:
           branches:
             only:
               - main
               - k8s-config-user-client-id
     - deploy_production_approval:
         type: approval
         requires:
           - deploy_staging
         filters:
           branches:
             only: main
     - deploy_production:
         requires:
           - deploy_production_approval
         filters:
           branches:
             only: main
